<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tools on 布萊德的學習網站</title>
    <link>https://bradleetw.github.io/categories/tools/</link>
    <description>Recent content in Tools on 布萊德的學習網站</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 19 Jul 2019 23:00:05 +0800</lastBuildDate>
    
	<atom:link href="https://bradleetw.github.io/categories/tools/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>讓 iTerm2 也翻牆</title>
      <link>https://bradleetw.github.io/developmenttools/iterm2ss/</link>
      <pubDate>Fri, 19 Jul 2019 23:00:05 +0800</pubDate>
      
      <guid>https://bradleetw.github.io/developmenttools/iterm2ss/</guid>
      <description>Reference
首先環境必須先安裝好 shadowsocks.
安裝 polipo brew install polipo 設定 polipo polipo 開機自啟動 atom /usr/local/opt/polipo/homebrew.mxcl.polipo.plist 在 homebrew.mxcl.polipo.plist 中加上 socksParentProxy=localhost:1080.
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;!DOCTYPE plist PUBLIC &amp;#34;-//Apple//DTD PLIST 1.0//EN&amp;#34; &amp;#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;#34;&amp;gt; &amp;lt;plist version=&amp;#34;1.0&amp;#34;&amp;gt; &amp;lt;dict&amp;gt; &amp;lt;key&amp;gt;Label&amp;lt;/key&amp;gt; &amp;lt;string&amp;gt;homebrew.mxcl.polipo&amp;lt;/string&amp;gt; &amp;lt;key&amp;gt;RunAtLoad&amp;lt;/key&amp;gt; &amp;lt;true/&amp;gt; &amp;lt;key&amp;gt;KeepAlive&amp;lt;/key&amp;gt; &amp;lt;true/&amp;gt; &amp;lt;key&amp;gt;ProgramArguments&amp;lt;/key&amp;gt; &amp;lt;array&amp;gt; &amp;lt;string&amp;gt;/usr/local/opt/polipo/bin/polipo&amp;lt;/string&amp;gt; &amp;lt;string&amp;gt;socksParentProxy=localhost:1080&amp;lt;/string&amp;gt; &amp;lt;/array&amp;gt; &amp;lt;/dict&amp;gt; &amp;lt;/plist&amp;gt;ln -sfv /usr/local/opt/polipo/*.plist ~/Library/LaunchAgents launchctl load ~/Library/LaunchAgents/homebrew.mxcl.polipo.plist 若要從自啟動中取消 launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.polipo.plist 設置別名 在 .zshrc 中加入以下命令:
alias proxy=&amp;#34;export http_proxy=http://localhost:8123;export https_proxy=http://localhost:8123&amp;#34; alias unproxy=&amp;#34;unset http_proxy&amp;#34; 使用 啟動, 當然 SS 必須先啟動</description>
    </item>
    
    <item>
      <title>[GitHub]如何在同一台 mac 中建立兩個不同的 GitHub account ?</title>
      <link>https://bradleetw.github.io/developmenttools/multigithubaccount/</link>
      <pubDate>Tue, 18 Dec 2018 10:01:29 +0800</pubDate>
      
      <guid>https://bradleetw.github.io/developmenttools/multigithubaccount/</guid>
      <description>Why need 2 or more Git(Hub) accounts in the same mac? 我現在的目的就只是為了能熟悉 Git 操作, 利用多個 Git accounts 來觀察實驗結果, 而遠端的服務選擇的是 GitHub.
在設定多個帳戶過程中遇到了一些困難, 藉由此篇記錄相關知識.
網路上很多使用者是利用多個 Git accounts 來使得開發者的環境, 可以同時存在個人以及公司的 Source Version Control, 這才是真正的使用場景.
2 Major Domain knowledge need to understand SSH and Git Configuration 是兩個基礎知識, 本篇記錄這兩個部分.
SSH (Secure SHell protocol) 目前利用這種密鑰的登入服務是主流方法(因為設定成功後, 使用者就可以不用 type 密碼.), 利用開發者產生的私鑰和公開密鑰, 將公開密鑰放到遠端服務上, 來做匹配帳號的事.
現在我的 mac 上是用 OpenSSH 這個實作 SSH 的 Open Source, 應該是 macOS 的標準配備.
ssh-keygen 利用 ssh-keygen 除了可以產生公鑰和私鑰之外, 呈現密鑰, 還可以管理 /.</description>
    </item>
    
    <item>
      <title>[Git]如何忽略追蹤特定檔案或目錄?</title>
      <link>https://bradleetw.github.io/developmenttools/gitstudy/gitrelated_1/</link>
      <pubDate>Wed, 08 Aug 2018 11:49:49 +0800</pubDate>
      
      <guid>https://bradleetw.github.io/developmenttools/gitstudy/gitrelated_1/</guid>
      <description>只要編輯以下三個檔案(忽略清單)其中一個就可以忽略追蹤特定檔案或目錄:
 $HOME/.config/git/ignore: 開發者電腦中的所有倉庫都可以讀取該忽略清單. .gitignore: 每個倉庫都有自己一份的忽略清單放在該倉庫根目錄下, 而且該忽略清單可以被分享追蹤管理. .git/info/exclude: 該忽略清單無法被追蹤管理.  $HOME/.config/git/ignore 有時候系統或者一些第三方應用為了讓其運作的效果更好, 會在目錄底下產生一些額外的檔案, 列如: .DS_Store, 而這些對開發者本身而言這類無關開發的資料都是不必要去追蹤紀錄, 這時可以透過編輯 $HOME/.config/git/ignore 來寫下要忽略的檔案, 而這個是對系統內的所有倉庫都有用. 以下是該檔案內的一些範例:
# General .DS_Store .AppleDouble .LSOverride # Files that might appear in the root of a volume .DocumentRevisions-V100 .fseventsd .Spotlight-V100 .TemporaryItems .Trashes .VolumeIcon.icns .com.apple.timemachine.donotpresent  .gitignore 在開發的環境中會因為編譯產生執行檔案, 連結檔, 某些檔案或是某些目錄開發者根本不必追蹤, 但是這個忽略清單卻是可以分享給其他開發者或者需要版本管控忽略清單 (有可能在經過一段的開發時間, 開發環境導入了新的機制或是功能, 而產生新的不必追蹤檔案) 這時只要在開發項目的根目錄下放入 .gitignore, 在該檔案中寫入你要忽略上傳的特定檔案或目錄:
 特定檔案: 直接放入檔案名稱, ex: somefolder/specific.txt
 符合特定字串的檔案: 加入萬用字元, ex: /db/*.sqlite3
 目錄: ex: somefolder/</description>
    </item>
    
    <item>
      <title>讓 iTerm2 有很酷炫的外表!</title>
      <link>https://bradleetw.github.io/developmenttools/iterm2setting/</link>
      <pubDate>Sun, 29 Jul 2018 17:41:05 +0800</pubDate>
      
      <guid>https://bradleetw.github.io/developmenttools/iterm2setting/</guid>
      <description>常看到電影裡的駭客在操作電腦時所用的 command line 都是那麼的酷, 今天就來速記一下參考網路上別人分享設定的步驟. 參考的來源: 超簡單！十分鐘打造漂亮又好用的 zsh command line 環境
iTerm2 的安裝就沒記錄, 因為早就安裝過, 安裝流程也不難.
安裝 zsh + oh-my-zsh zsh 是類似 bash, 在一般的使用上兩者差不多, 而 zsh 要再搭配上 oh-my-zsh(它是基於 zsh 的一個擴展工具集, 提供了豐富的擴展功能), 就可以設置有趣的主題風格(Themes), 而 oh-my-zsh 本身就提供了很多主題可以讓你挑選.
 安裝 zsh:
$ brew install zsh  將 zsh 改成預設 shell:
$ sudo sh -c &amp;quot;echo $(which zsh) &amp;gt;&amp;gt; /etc/shells&amp;quot; $ chsh -s $(which zsh)  安裝 oh-my-zsh:
$ wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh $ bash ./install.sh   安裝 zsh theme: powerlevel9k  下載好用的主題:</description>
    </item>
    
  </channel>
</rss>